Script started on Fri 09 Aug 2013 12:22:57 PM EDT
hkim142@matrix:~/oop244/ass4> whoami
hkim142
hkim142@matrix:~/oop244/ass4> cat ISBN.h ISBN.cpp
/*Hyungi kim
025 741 125
assignment 3
ISBN.h*/

#include<iostream>
#include <cstdio>
#include <cstring>
#include <iomanip>
#include <fstream>
#include <cstdlib>
using namespace std;
#include "ISBNPrefix.h"
class ISBN{
	char ISBNcd[11];
	char area[6];
	char publisher[8];
	char title[7];
	bool registered;
	bool isregistered(const ISBNPrefix& list);
public:
	ISBN();
	ISBN(const char* s2, const ISBNPrefix& list);
	 bool isRegistered() const;
	 bool isRegistered(const ISBNPrefix& list);
	 bool empty() const;
	 void toStr(char* str) const;
	 void toStrWithStyle(char* str) const;
	 bool read(istream& is, const ISBNPrefix list);
	 void display(ostream& os) const;
};
int isValid(const char* str);
bool operator == (const ISBN& left, const ISBN& right);
ostream& operator<<(ostream& os, const ISBN& a);/*Hyungi kim
025 741 125
assignment 3
ISBNP.cpp*/


#include<iostream>
#include <cstdio>
#include <cstring>
#include <iomanip>
#include <fstream>
#include <cstdlib>
using namespace std;

#include "ISBN.h"
int isValid(const char str[])
{
   int i, a=0, b=10, rc, sum=0;
 
   if( str != NULL )
   {
      if( strlen( str ) != 10 )
         return false;
      else
         if( str[9] == 'X' || ( str[9] >= '0' && str[9] <= '9' ) )//checking the digits are correct
         {
            for( i = 0; i < 9; i++ )
            {
               if( str[i] < '0' && str[i] > '9' )
                  return false;/// is numer in correct digits
            }
         }
 
      if( str[9] == 'X' )
         rc = 10;//if check digits are X than value is 10
      else
         rc = str[9] - '0';//if not the value is value
 
     for(a=0;a<9;a++,b--)
      {
         sum += ( str[a] - '0' ) * b; // make ur sum           
      }
 
      sum += rc;//check digit + sum
 
      if( sum % 11 == 0 ){
         return true;
	  }
      else{
         return false;
	  }
   }
 
   return false;
}
ISBN::ISBN(){
	int t = 0, a = 0, p = 0,i=0;
	for(i=0;i<11;i++){
		ISBNcd[i]='\0';
	}//safe empty satate
	for(t=0;t<7;t++){
      title[t] = '\0';
   }//safe empty satate
 
	 for( a=0;a<6;a++ ){
      area[a] = '\0';
   }//safe empty satate
 
   for(p=0;p<8;p++ ){
      publisher[p] = '\0';
   }////safe empty satate
   registered=false;//safe declarition of null values and false
}//ISBN Constructior ends
bool ISBN::empty() const{
	if(ISBNcd[0]=='\0'){
		return true;
	}
	else{
		return false;
	}
}//ISBN::empty ends
bool operator == (const ISBN& left, const ISBN& right){
	char temp[11], tempx[11];
	left.toStr(temp);
	right.toStr(tempx);
	if(strcmp(temp,tempx)==0){
		return true;
	}
	return false;
}
/*a function compares ISBNcode from two lsbn class reference
if both isbn code is are equal return true else return false*/
 bool ISBN::isRegistered(const ISBNPrefix& list)
{
   int t = 0, a = 0, p = 0;
 
  for(t=0;t<7;t++){
      title[t] = '\0';
   }
 
   for(a=0;a<6;a++){
      area[a] = '\0';
   }
 
 for(p=0;p<8;p++){
      publisher[p] = '\0';
   }//setting all values in to null
 
   for( a=0; a<5; a++ ){
      area[a] = ISBNcd[a];//area=ISBNcd;
      for( p=1; p<8; p++ ){
         publisher[p - 1] = ISBNcd[a + p];
         if( list.isRegistered(atoi( area ), publisher ) ) {
            for( t=1; t<7; t++ ){
               if(a+p+t == 9 ){
                  t = 7;//is digit count goes max(9)
			   }
               else{
                  title[t - 1] = ISBNcd[t + a + p];
			   }
            }
            return true;
         }
      }
      for(p=0;p<8;p++){
         publisher[p] = '\0';//or reset publisher array
      }
   }
return false;
 
}//ISBN::isRegistered const ISBNPrefix & ends
ISBN::ISBN(const char* s2, const ISBNPrefix& list){
	if(isValid(s2)==true){//is valid str?
		strcpy(ISBNcd,s2);
		if(isRegistered(list))
		{
			registered=true;
		}
		else{
			registered=false;
		}
	}//if isVlaid=true
	else{
		*this =ISBN();}
}//ISBN::ISBN(const char*,const ISBNprefix&) ends
 bool ISBN::isRegistered() const{
	 return registered;
 }//end of ISBN::isRegistered()
 void ISBN::toStr(char* str) const{
	 strcpy(str,ISBNcd);//copys ISBN cd to str and return
 }//tostr ends
 void ISBN::toStrWithStyle(char* str) const{
	 if(isValid(str)==true){
		strcpy(str, area);
        strcat(str, "-");
        strcat(str, publisher);
        strcat(str, "-");
        strcat(str, title);
        strcat(str, "-");
        strcat(str, &ISBNcd[9]);//area-publiser-titler to str and return
	 }
	 else{
		 toStr(str);//if not valid than changes to no style mod
	 }
 }//tostrwithstyle ends
 bool ISBN::read(istream& is, const ISBNPrefix list){
	 char temp[11];
	 int i=0;
	 while (i==0){
		 cout<<"ISBN 0 to quit :"<<endl;
		 is.getline(temp,11);
		 if(strcmp(temp,"0")==0)
			{
			return false;
			}
		 if(strlen(temp)>10){
			 return false;
		 }
		 else if(strlen(temp) ==10 && isValid(temp) == true){
			 i++;
			 *this=ISBN(temp, list);
		 }
		 else{
			 cout<<"Invalid check digit. Please try again"<<endl;
		 }	 
	 }
	 return true;
 }//read ends
 void ISBN::display(ostream& os) const{
	 char temp[13];
	 if(registered==true){
		 toStrWithStyle(temp);
	 }
	 else{
		 toStr(temp);
	 }
	 os.width(13);
	 os<<temp<<endl;
 }//display ends

 ostream& operator<<(ostream& is, const ISBN& a){
	 a.display(is);
	 return is;
 }
 /*an function that sends ostream to display*/hkim142@matrix:~/oop244/ass4> cat ISN[KBNPrefix.cpp [K[K[K[Kh ISBNPrefix.cpp
/*Hyungi kim
025 741 125
assignment 3
ISBNPrefix.h*/
#include <cstdio>
#include <cstring>
#include <stdio.h>
#include <fstream>
using namespace std;
class ISBNPrefix{
FILE *fp;
private:
ISBNPrefix(const ISBNPrefix& source);
ISBNPrefix& operator=(const ISBNPrefix& source);
public:
ISBNPrefix();
ISBNPrefix(const char* filename);
bool isRegistered(int area) const;
int minNoDigits(int area) const;
bool isRegistered(int area, const char* publisher) const;
 ~ISBNPrefix();
};/*Hyungi kim
025 741 125
assignment 3
ISBNPrefix.cpp*/

#include<iostream>
#include <cstdio>
#include <cstring>
#include <stdio.h>
#include <fstream>

using namespace std;
#include"ISBNPrefix.h"

ISBNPrefix::ISBNPrefix(){
	fp=NULL;
}
ISBNPrefix::ISBNPrefix(const char* filename){
	if(filename !=NULL){
	fp = fopen ("prefixRanges.txt","r");
	}
	else{
		fp=NULL;
	}
}
ISBNPrefix::ISBNPrefix(const ISBNPrefix& a){
	*this=a;
}
/*private copy constructor prevents copy from nowhere*/

ISBNPrefix& ISBNPrefix::operator=(const ISBNPrefix& source){
	fp=source.fp;
	return *this;
}
/*private copy constructor prevents copy from nowhere*/
bool ISBNPrefix::isRegistered(int area) const{
	int a,ps,pl;
    if(fp!=NULL){
		rewind(fp);
		do{
        fscanf(fp,"%d%d%d",&a,&ps,&pl);
        if (a == area){
			return true;
		}
		}while(a!=area && !feof(fp));
	}
    return false;
}
int ISBNPrefix::minNoDigits(int area) const{
	int minno = 0, a;
        char pmin[8], pmax[8];
        int i = 0;
 
        if (area < 0)
                return 0;
 
        rewind(fp);
        while (!feof(fp))
        {
                fscanf(fp, "%d %s %s", &a, &pmin, &pmax);
                if (area == a)
                {
                        minno = strlen(pmin);
                        break;
                }
        }
        return minno;
}
bool ISBNPrefix::isRegistered(int area, const char* publisher) const{
	int a,minck=0;
    char pu[10],pl[10];
    if(fp !=NULL){
		rewind(fp);		
		do{
        fscanf(fp,"%d%s%s",&a,pu,pl);
        if(a == area){
            if(strlen(publisher)==strlen(pu)){
				if((strcmp(publisher,pu) >=0) && (strcmp(publisher,pl)<=0)){
					return true;
				}
			}
		}//a==area;
	}while (minck==0 && !feof(fp));
	}// if !=NULL
    return false;
}
ISBNPrefix::~ISBNPrefix(){
	if( fp !=NULL){
		fclose(fp);
	}
}hkim142@matrix:~/oop244/ass4> cat Orer[K[Kder.c[Kh Order.cpp
/*Hyungi kim
025 741 125
assignment 3
order.h*/

#include <iostream>
#include <cstdio>
#include <cstring>
#include <stdio.h>
#include <fstream>
using namespace std;
#include"ISBN.h"

class Order{
	int ord;
	int deli;
	ISBN isbnOrder;
public:
	Order();
	Order(const ISBN& isbn);
	bool has(const ISBN& isbn) const;
	int outstanding() const;
	bool add(istream& is);
	bool add(int n);
	bool receive(istream& is);
	void display(ostream& os) const;
};

ostream& operator<<(ostream& os, const Order& list);/*Hyungi kim
025 741 125
assignment 3
order.cpp*/

#include <iostream>
#include <cstdio>
#include <cstring>
#include <iomanip>
#include <fstream>
#include <cstdlib>
using namespace std;
#include"Order.h"


Order::Order(){
	ISBN temp;
	isbnOrder = temp;
	ord=0;
	deli=0;
}
/* safe empty state mode*/
Order::Order(const ISBN& str){
	isbnOrder = str;
	ord=0;
	deli=0;
}
/* copy consturctor*/

bool Order::has(const ISBN& str) const{
	if (isbnOrder == str){
		return true;}
	else{
	return false;}
	
}
/* compare classes and return true it matched else return false*/

int Order::outstanding() const{
	return ord;
}
/* a funcion returns ordered value in current object;*/

bool Order::receive(istream& is){
	bool flag=false;
	int x=0;
	int y=0;
	do{
		if(x>ord){
			cout<<"error"<<endl;
			cin.ignore(1000,'\n');
		}
		else if(x<0){
			cout<<"enter positive number please"<<endl;
			cin.ignore(1000,'\n');
		}
		else if(x ==0){
			cin.ignore(1000,'\n');
			y=1;
		}
		else{
		cin.ignore(1000,'\n');
		flag=true;
		deli=deli+x;

		}
	}while(y==0 && !flag);
	return flag;
};
/* receive the refrence form istream and gets value from user
if user enters 0 quits and continuses askes untill user enter proper positivie number of deli variable
and add with current deli variable in this obj*/
bool Order::add(istream& is){
	bool flag = false;
	int x=0;
	int y=0;
	do{
		cout<<"Quantity(0 to quit)";
		is>>x;
		if( x <0){
			cout<<"enter positive number please"<<endl;
			cin.ignore(1000,'\n');
		}
		else if ( x==0){
			cout<<"exiting"<<endl;
			cin.ignore(1000,'\n');
			y=1;
		}
		else{
			cin.ignore(1000,'\n');
			flag=true;
			ord= ord+x;
		}

	}while(y==0 && !flag);
	return flag;
}
/* receive the refrence form istream and gets value from user
if user enters 0 quits and continuses askes untill user enter proper positivie number of ord variable
and add with current ord variable in this obj*/
bool Order::add(int n){
	if( n>0 && !(isbnOrder == ISBN())){
		ord= ord+n;
		return true;
	}
	return false;
}
/*a fuction recives intiger that will going to current ord varabile in this obj
yet it return true is isbnOrder value is in safe empty state else return false*/
void Order::display(ostream& os) const{
 
   os << right << setw(13) << isbnOrder
      << setw(9) << ord
      << setw(11) << deli;
}
// DISPLAY

ostream& operator<<(ostream& os, const Order& list){
	list.display(os);
	return os;
}/*function send ostream to display */hkim142@matrix:~/oop244/ass4> cat Se[KpecialOrder.h Speical[K[K[K[Kcoa[K[KialOrder.cpp
/*
Hyungi Kim
025 741 125
OOP244
ASSIGNMENT4 
SpecialOrder.h
*/
#include<iostream>
#include <cstdio>
#include <cstring>
#include <iomanip>
#include <fstream>
#include <cstdlib>
using namespace std;
#include "Order.h"
     class SpecialOrder : public Order{
  char* inst;
  public:
   SpecialOrder();
   SpecialOrder(const ISBN& isbn, const char* instr);
   SpecialOrder(const SpecialOrder& source);
   bool add(istream& is);
   void display(ostream& os) const;
   SpecialOrder& operator=(const SpecialOrder& source);
   ~SpecialOrder();
};

	 ostream& operator<<(ostream& os, SpecialOrder obj);
/*
Hyungi Kim
025 741 125
OOP244
ASSIGNMENT4 
SpecialOrder.cpp
*/

#include<iostream>
#include <cstdio>
#include <cstring>
#include <iomanip>
#include <fstream>
#include <cstdlib>
using namespace std;
#include "SpecialOrder.h"


  SpecialOrder::SpecialOrder(){
	  inst = NULL;
	}
  /*declair variables in this objective to empty state*/
   SpecialOrder::SpecialOrder(const ISBN& isbn, const char* str):Order(isbn){
	  if(str != NULL){
       inst= new char[strlen(str) + 1];
       strcpy(inst, str);
    }
    else
       inst= NULL;
   }
   /*a constructor creates  object from a reference to an ISBN and the address of 
   string containing the special instructions*/
   SpecialOrder::SpecialOrder(const SpecialOrder& str):Order(str){
	   *this = str;
   }
   /*Copy constructor*/
   bool SpecialOrder::add(istream& is){
	    char specialInstr[100 + 1];
    specialInstr[0]= '\0';
    bool status= false;
 
   if(Order::add(is) == true){
       cout << "Instructions : ";
       is.getline(specialInstr, 100, '\n');
       status= true;
    }
    if(status){
       if(inst != NULL)
          delete [] inst;
 
      inst= new char[strlen(specialInstr) + 1];
       strcpy(inst, specialInstr);
    }
 
   return status;
   }
   /* modifier that receives istream and adds orders and instructions to the current object*/
   void SpecialOrder::display(ostream& os) const{
	   if(inst != NULL){
			os<<" "<<inst;
	   }
	   else{
		   cout<<"ERROR";
	   }
   }
   /* a query receive reference from ostream object and display class*/
   SpecialOrder& SpecialOrder::operator=(const SpecialOrder& str){
	   Order *temp=this;
	   const Order *temp2=&str;
	   *temp=*temp2;
	   inst = new char [ strlen(str.inst) +1];
	   strcpy(inst,str.inst);
	   return *this;
   }
   /*an operator copies data in between classes*/
   SpecialOrder::~SpecialOrder(){
	   if( inst != NULL){
		   delete [] inst;
	   }
   }
   /* if inst is not empty state and delete memory allocation assignmed to star variable */
hkim142@matrix:~/oop244/ass4> a.out
Prefix Tests
============
totalPassed test    1 (isRegistered(-1))
totalPassed test    2 (isRegistered(99955))
totalPassed test    3 (isRegistered(0))
totalPassed test    4 (isRegistered(-1, 0))
totalPassed test    5 (isRegistered(99955, 0))
totalPassed test    6 (isRegistered(0, 10))
totalPassed test    7 (isRegistered(99955, 0))
totalPassed test    8 (isRegistered(0, 95000000))
totalPassed test    9 (minNoDigits(-1))
totalPassed test   10 (minNoDigits(0))
totalPassed test   11 (minNoDigits(92))
totalPassed test   12 (minNoDigits(99955))

Prefix Tests totalPassed!

ISBN Tests
==========
totalPassed test   13 (ISBN() and empty())
totalPassed test   14 (ISBN() and isRegistered())
totalPassed test   15 (ISBN("9070002043", ) and empty())
totalPassed test   16 (ISBN("9070002043", ) and isRegistered())
totalPassed test   17 (ISBN(9070002046) and empty())
totalPassed test   18 (ISBN("9070002046", ) and isRegistered())
totalPassed test   19 (toStr on ISBN() and IBSN("9070002046", ))
totalPassed test   20 (ISBN(9070002043) and toStr(char*))
totalPassed test   21 (ISBN(...) and toStr(char*))
totalPassed test   22 (ISBN(9070002043) and toStr(char*))
totalPassed test   23 (ISBN(9070002043) and toStrWithStyle(char*))
totalPassed test   24 (ISBN(9995500000) and toStrWithStyle(char*))
totalPassed test   25 (ISBN(9070002046) == ISBN(9070002046) returned true)
totalPassed test   26 (ISBN(9070002043) == ISBN(9070002043) returned true)
totalPassed test   27 (ISBN(9070002043) == ISBN(9070002046) returned false)

ISBN Tests totalPassed!

ISBN/Prefix Tests
=================
totalPassed test   28 (isRegistered() returned true for 9070002043)
totalPassed test   29 (isRegistered() returned true for 9995500000)
totalPassed test   30 (isRegistered() returned true for 0000000000)
totalPassed test  130 (isRegistered() returned true for 8070000007)
totalPassed test  230 (isRegistered() returned true for 9020000004)
totalPassed test  330 (isRegistered() returned true for 9559500007)
totalPassed test  430 (isRegistered() returned true for 9679989003)
totalPassed test  530 (isRegistered() returned true for 9781990007)
totalPassed test  630 (isRegistered() returned true for 9946000008)
totalPassed test  730 (isRegistered() returned true for 9961700007)
totalPassed test  830 (isRegistered() returned true for 9976999909)
totalPassed test  930 (isRegistered() returned true for 9990389004)
totalPassed test 1030 (isRegistered() returned true for 9992200006)
totalPassed test 1130 (isRegistered() returned true for 9993990000)
totalPassed test 1152 (  isValid(...) returned false for XXXXXXXXX0)
totalPassed test 1155 (  isValid(...) returned false for 081613752X)

ISBN/Prefix Tests totalPassed!

Order Tests
===========
totalPassed test 1156 (Order(), has(ISBN()) returned true)
totalPassed test 1157 (Order(), outstanding() returned 0)
totalPassed test 1158 (has("9070002043"), outstanding())
totalPassed test 1159 (has("9070002043"), outstanding())
totalPassed test 1160 (has("9070002046"), outstanding())
totalPassed test 1161 (has("9070002046"), add(5), outstanding())
totalPassed test 1162 (has("XXXXXXXXX0"), outstanding())
totalPassed test 1163 (has("XXXXXXXXX0"), add(5), outstanding())
totalPassed test 1164 (has("014010867X"), outstanding())
totalPassed test 1165 (has("014010867X"), add(5), outstanding())

Order Tests totalPassed!

Special Order Tests
===================
totalPassed test 1166 (SpecialOrder(), has(ISBN()) returned true)
totalPassed test 1167 (SpecialOrder(), outstanding() returned 0)
totalPassed test 1168 (has("9070002043"), outstanding())
totalPassed test 1169 (has("9070002043"), add(5), outstanding())
totalPassed test 1170 (has("9070002046"), outstanding())
totalPassed test 1171 (has("9070002046"), add(5), outstanding())
totalPassed test 1172 (Order(), has(ISBN()) returned true)
totalPassed test 1173 (has("XXXXXXXXX0"), add(5), outstanding())
totalPassed test 1174 (has("014010867X"), add(5), outstanding())

Special Order Assignment Operator & Copy Constructor Tests
===========================================================
totalPassed test 1175 (A.O. - has("9070002043")), outstanding())
totalPassed test 1176 (A.O. - has("XXXXXXXXX0")), outstanding())
totalPassed test 1177 (passed add(1))
totalPassed test 1178 (passed add(1))
totalPassed test 1179 (C.C. - has("9070002043")), outstanding())
totalPassed test 1180 (created ("014010867X") dynamically)
totalPassed test 1181 (C.C. - has("014010867X")), outstanding())
totalPassed test 1182 (Ctor - has("9070002044")), outstanding())

Special Order Tests totalPassed!


Your Bookstore modules have totalPassed 1182 of 1182 tests

Congratulations!!!   Your Bookstore modules are ready for submission

hkim142@matrix:~/oop244/ass4> exit
exit

Script done on Fri 09 Aug 2013 12:23:53 PM EDT
